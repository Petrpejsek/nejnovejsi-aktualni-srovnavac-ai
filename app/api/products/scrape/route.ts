import { NextResponse } from 'next/server';
import prisma from '../../../../lib/prisma';
import { NextRequest } from 'next/server';
import OpenAI from 'openai';

// Inicializace OpenAI klienta
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

interface ProductData {
  name: string;
  description: string;
  category: string;
  price: number;
  advantages: string[];
  disadvantages: string[];
  hasTrial: boolean;
  tags: string[];
  detailInfo: string;
  pricingInfo: any;
}

// POST /api/products/scrape - Automatick√© scrapov√°n√≠ produkt≈Ø z URL
export async function POST(request: NextRequest) {
  try {
    const { urls } = await request.json();

    if (!urls || !Array.isArray(urls) || urls.length === 0) {
      return NextResponse.json({ 
        success: false, 
        error: 'Pros√≠m zadejte seznam URL' 
      }, { status: 400 });
    }

    console.log(`üöÄ Zaƒç√≠n√°m scraping pro ${urls.length} URL...`);

    const results = [];

    for (let i = 0; i < urls.length; i++) {
      const url = urls[i].trim();
      
      if (!url.startsWith('http')) {
        results.push({
          url,
          success: false,
          error: 'Neplatn√° URL adresa'
        });
        continue;
      }

      console.log(`üìÑ Zpracov√°v√°m ${i + 1}/${urls.length}: ${url}`);

      try {
        // 1. St√°hnout obsah webov√© str√°nky
        console.log(`üåê Stahuji obsah: ${url}`);
        const websiteContent = await fetchWebsiteContent(url);
        
        if (!websiteContent) {
          console.error(`‚ùå Nepoda≈ôilo se st√°hnout obsah: ${url}`);
          results.push({
            url,
            success: false,
            error: 'Nepoda≈ôilo se st√°hnout obsah str√°nky'
          });
          continue;
        }

        console.log(`üìÑ Obsah sta≈æen (${websiteContent.length} znak≈Ø)`);

        // 2. Extrahovat data pomoc√≠ OpenAI
        console.log(`ü§ñ Vol√°m OpenAI pro extrakci dat...`);
        const productData = await extractProductData(url, websiteContent);
        
        if (!productData) {
          console.error(`‚ùå OpenAI nevr√°tilo validn√≠ data pro: ${url}`);
          results.push({
            url,
            success: false,
            error: 'Nepoda≈ôilo se extrahovat data produktu nebo nen√≠ AI/tech produkt'
          });
          continue;
        }

        console.log(`‚úÖ Data extrahov√°na: ${productData.name}`);
        

        // 3. Vytvo≈ôit screenshot
        console.log(`üì∏ Tvo≈ô√≠m screenshot pro: ${productData.name}`);
        const screenshotUrl = await createScreenshot(url, productData.name);
        console.log(`üì∏ Screenshot ${screenshotUrl ? 'vytvo≈ôen' : 'selhal'}: ${screenshotUrl || '≈æ√°dn√° URL'}`);

        // 4. P≈ôidat do review queue (duplik√°ty se kontroluj√≠ p≈ôi approve)
        console.log(`‚úÖ Produkt p≈ôipraven k review: ${productData.name}`);

        results.push({
          url,
          success: true,
          reviewData: {
            ...productData,
            externalUrl: url,
            screenshotUrl,
            scrapedAt: new Date().toISOString(),
            reviewId: `review_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
          }
        });

        // Kr√°tk√° pauza mezi requesty
        await new Promise(resolve => setTimeout(resolve, 2000));

      } catch (error) {
        console.error(`‚ùå Chyba p≈ôi zpracov√°n√≠ ${url}:`, error);
        results.push({
          url,
          success: false,
          error: error instanceof Error ? error.message : 'Neoƒçek√°van√° chyba'
        });
      }
    }

    const successCount = results.filter(r => r.success).length;
    const failCount = results.filter(r => !r.success).length;

    console.log(`üéØ Scraping dokonƒçen: ${successCount} √∫spƒõ≈°n√Ωch, ${failCount} ne√∫spƒõ≈°n√Ωch`);

    // P≈ôidat √∫spƒõ≈°n√© produkty do review queue
    const reviewProducts = results
      .filter(r => r.success && r.reviewData)
      .map(r => r.reviewData)

    if (reviewProducts.length > 0) {
      try {
        const reviewResponse = await fetch(`${process.env.NEXTAUTH_URL || 'http://localhost:3000'}/api/review-queue`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ products: reviewProducts })
        })

        const reviewResult = await reviewResponse.json()
        
        if (reviewResult.success) {
          console.log(`üìù ${reviewResult.addedCount} produkt≈Ø p≈ôid√°no do review queue`)
        } else {
          console.warn(`‚ö†Ô∏è Probl√©m s review queue: ${reviewResult.error}`)
        }
      } catch (error) {
        console.error('‚ùå Chyba p≈ôi p≈ôid√°v√°n√≠ do review queue:', error)
      }
    }

    return NextResponse.json({
      success: true,
      totalProcessed: urls.length,
      successCount,
      failCount,
      results,
      reviewQueueAdded: reviewProducts.length
    });

  } catch (error) {
    console.error('‚ùå Kritick√° chyba p≈ôi scrapingu:', error);
    return NextResponse.json({
      success: false,
      error: 'Vnit≈ôn√≠ chyba serveru'
    }, { status: 500 });
  }
}

// St√°hne obsah webov√© str√°nky
async function fetchWebsiteContent(url: string): Promise<string> {
  try {
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
      },
      signal: AbortSignal.timeout(30000)
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    const html = await response.text();
    
    // O≈ô√≠znut√≠ HTML na prvn√≠ch 15KB pro AI anal√Ωzu
    return html.substring(0, 15000);

  } catch (error) {
    console.warn(`‚ö†Ô∏è Nepoda≈ôilo se st√°hnout ${url}:`, error);
    return '';
  }
}

// Extrahuje data produktu pomoc√≠ OpenAI
async function extractProductData(url: string, htmlContent: string): Promise<ProductData | null> {
  try {
    const prompt = `
Analyzuj n√°sleduj√≠c√≠ HTML obsah webov√© str√°nky a extrahuj informace o AI/tech produktu nebo slu≈æbƒõ.

URL: ${url}
HTML obsah: ${htmlContent}

Vra≈• data ve form√°tu JSON s tƒõmito poli:
{
  "name": "N√°zev produktu (max 100 znak≈Ø)",
  "description": "Kr√°tk√Ω popis produktu (2-4 vƒõty)",
  "category": "Kategorie (nap≈ô. 'AI Tools', 'SaaS', 'Productivity', 'Design Tools', 'Analytics', 'Marketing Tools', 'Developer Tools')",
  "price": ƒç√≠seln√° hodnota z√°kladn√≠ ceny (0 pokud je zdarma),
  "advantages": ["v√Ωhoda 1", "v√Ωhoda 2", "v√Ωhoda 3", "v√Ωhoda 4"] - 4-6 v√Ωhod,
  "disadvantages": ["nev√Ωhoda 1", "nev√Ωhoda 2"] - 1-3 nev√Ωhody,
  "hasTrial": true/false - m√° zku≈°ebn√≠ verzi zdarma,
  "tags": ["tag1", "tag2", "tag3"] - relevantn√≠ tagy,
  "detailInfo": "Detailn√≠ popis produktu a jeho funkc√≠ (3-5 vƒõt)",
  "pricingInfo": {
    "plans": [
      {"name": "Free", "price": 0, "features": ["funkce1", "funkce2"]},
      {"name": "Pro", "price": 29, "features": ["funkce1", "funkce2", "funkce3"]}
    ]
  }
}

D≈ÆLE≈ΩIT√â:
- V≈°echny texty pi≈° v ANGLIƒåTINƒö
- Pokud nenajde≈° cenu, pou≈æij 0
- Buƒè precizn√≠ s n√°zvy a popisy
- Zamƒõ≈ô se na kl√≠ƒçov√© funkce a v√Ωhody
- Ignoruj cookies bannery a reklamy
- Pokud to nen√≠ AI/tech produkt, vra≈• null
`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "Jsi expert na anal√Ωzu webov√Ωch str√°nek a extrakci dat o tech produktech. V≈ædy vr√°t√≠≈° validn√≠ JSON nebo null."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.3,
      max_tokens: 2000
    });

    const content = response.choices[0].message.content?.trim();
    
    if (!content) {
      return null;
    }

    // ƒåi≈°tƒõn√≠ odpovƒõdi od markdown blok≈Ø
    let cleanContent = content;
    if (cleanContent.includes('```json')) {
      cleanContent = cleanContent.split('```json')[1].split('```')[0];
    } else if (cleanContent.includes('```')) {
      cleanContent = cleanContent.split('```')[1].split('```')[0];
    }

    const productData = JSON.parse(cleanContent.trim());
    
    // Validace dat
    if (!productData.name || !productData.description) {
      return null;
    }

    return productData;

  } catch (error) {
    console.error('‚ùå Chyba p≈ôi extrakci dat OpenAI:', error);
    return null;
  }
}

// Vytvo≈ô√≠ screenshot homepage
async function createScreenshot(url: string, productName: string): Promise<string | null> {
  try {
    // Vol√°n√≠ Python screenshot API (p≈ôedpokl√°d√°m ≈æe m√°te endpoint)
    const response = await fetch('http://localhost:5000/screenshot', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        url,
        filename: `${productName.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase()}_homepage.png`
      })
    });

    if (response.ok) {
      const result = await response.json();
      return result.screenshotUrl;
    }

    return null;
  } catch (error) {
    console.warn('‚ö†Ô∏è Screenshot se nepoda≈ôilo vytvo≈ôit:', error);
    return null;
  }
} 