#!/usr/bin/env node
/**
 * üéØ P≈òID√ÅN√ç TESTOVAC√çCH PRODUKT≈Æ
 * 
 * P≈ôid√° nƒõkolik testovac√≠ch produkt≈Ø do datab√°ze pro testov√°n√≠ funkcionalita duplicit
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const testProducts = [
  {
    name: "OpenAI ChatGPT",
    description: "Pokroƒçil√Ω AI chatbot pro konverzace a asistenci",
    category: "AI Chatbots",
    price: 20,
    externalUrl: "https://openai.com",
    advantages: JSON.stringify(["Velmi inteligentn√≠", "≈†irok√° znalostn√≠ b√°ze", "Podporuje mnoho jazyk≈Ø"]),
    disadvantages: JSON.stringify(["M≈Ø≈æe b√Ωt drah√Ω", "Nƒõkdy generuje nep≈ôesn√© informace"]),
    hasTrial: true,
    tags: JSON.stringify(["AI", "chatbot", "OpenAI", "GPT"]),
    detailInfo: "ChatGPT je pokroƒçil√Ω AI model vyvinut√Ω OpenAI",
    pricingInfo: JSON.stringify({
      plans: [
        { name: "Free", price: 0, features: ["Omezen√Ω p≈ô√≠stup"] },
        { name: "Plus", price: 20, features: ["Unlimited p≈ô√≠stup", "GPT-4"] }
      ]
    })
  },
  {
    name: "Claude AI",
    description: "AI asistent od Anthropic pro produktivn√≠ pr√°ci",
    category: "AI Assistants", 
    price: 20,
    externalUrl: "https://claude.ai",
    advantages: JSON.stringify(["Velmi bezpeƒçn√Ω", "Dlouh√Ω kontext", "Etick√© chov√°n√≠"]),
    disadvantages: JSON.stringify(["M√©nƒõ zn√°m√Ω ne≈æ ChatGPT"]),
    hasTrial: true,
    tags: JSON.stringify(["AI", "assistant", "Anthropic", "Claude"]),
    detailInfo: "Claude je AI asistent zamƒõ≈ôen√Ω na bezpeƒçnost a u≈æiteƒçnost",
    pricingInfo: JSON.stringify({
      plans: [
        { name: "Free", price: 0, features: ["Omezen√© pou≈æit√≠"] },
        { name: "Pro", price: 20, features: ["Rychlej≈°√≠ odpovƒõdi", "V√≠ce pou≈æit√≠"] }
      ]
    })
  },
  {
    name: "Midjourney",
    description: "AI gener√°tor obr√°zk≈Ø z textov√Ωch popis≈Ø",
    category: "AI Image Generation",
    price: 10,
    externalUrl: "https://midjourney.com", 
    advantages: JSON.stringify(["Vysoce kvalitn√≠ obr√°zky", "Kreativn√≠ v√Ωsledky", "Jednoduch√° interakce"]),
    disadvantages: JSON.stringify(["Pouze p≈ôes Discord", "Placen√© od zaƒç√°tku"]),
    hasTrial: false,
    tags: JSON.stringify(["AI", "image", "generation", "art"]),
    detailInfo: "Midjourney vytv√°≈ô√≠ √∫≈æasn√© AI obr√°zky prost≈ôednictv√≠m Discord bota",
    pricingInfo: JSON.stringify({
      plans: [
        { name: "Basic", price: 10, features: ["200 obr√°zk≈Ø/mƒõs√≠c"] },
        { name: "Standard", price: 30, features: ["Unlimited obr√°zky"] }
      ]
    })
  }
];

async function addTestProducts() {
  console.log('üéØ P≈ôid√°v√°m testovac√≠ produkty do datab√°ze...\n');
  
  try {
    for (const product of testProducts) {
      // Kontrola, zda produkt ji≈æ existuje
      const existing = await prisma.product.findFirst({
        where: { externalUrl: product.externalUrl }
      });

      if (existing) {
        console.log(`‚è≠Ô∏è  P≈ôeskakuji ${product.name} - ji≈æ existuje`);
        continue;
      }

      // P≈ôid√°n√≠ nov√©ho produktu
      const newProduct = await prisma.product.create({
        data: product
      });

      console.log(`‚úÖ P≈ôid√°n: ${product.name} (ID: ${newProduct.id})`);
    }

    console.log('\nüéâ Testovac√≠ produkty byly √∫spƒõ≈°nƒõ p≈ôid√°ny!');
    console.log('\nüí° Nyn√≠ m≈Ø≈æete otestovat kontrolu duplicit s n√°sleduj√≠c√≠mi URL:');
    testProducts.forEach((product, index) => {
      console.log(`   ${index + 1}. ${product.externalUrl}`);
    });

  } catch (error) {
    console.error('‚ùå Chyba p≈ôi p≈ôid√°v√°n√≠ produkt≈Ø:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addTestProducts(); 