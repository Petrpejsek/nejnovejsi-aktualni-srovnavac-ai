generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdClick {
  id                String   @id
  campaignId        String
  companyId         String
  ipAddress         String
  userAgent         String?
  country           String?
  referrer          String?
  costPerClick      Float
  isValidClick      Boolean  @default(true)
  fraudReason       String?
  conversionTracked Boolean  @default(false)
  conversionValue   Float?
  clickedAt         DateTime @default(now())
  Campaign          Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  Company           Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([clickedAt])
  @@index([companyId])
  @@index([ipAddress])
  @@index([isValidClick])
}

model AdImpression {
  id           String   @id
  campaignId   String
  position     Int
  pageType     String
  categorySlug String?
  ipAddress    String
  country      String?
  displayedAt  DateTime @default(now())
  Campaign     Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([displayedAt])
  @@index([pageType])
  @@index([position])
}

model Admin {
  id             String    @id
  name           String
  email          String    @unique
  hashedPassword String
  role           String    @default("super_admin")
  isActive       Boolean   @default(true)
  lastLoginAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime

  @@index([email])
  @@index([isActive])
}

model BillingRecord {
  id              String    @id
  companyId       String
  type            String
  amount          Float
  description     String
  paymentMethod   String?
  paymentIntentId String?
  invoiceNumber   String?
  invoiceUrl      String?
  campaignId      String?
  clickId         String?
  status          String    @default("completed")
  createdAt       DateTime  @default(now())
  processedAt     DateTime?
  Company         Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([createdAt])
  @@index([status])
  @@index([type])
}

model Campaign {
  id               String         @id
  companyId        String
  name             String
  productId        String
  targetUrl        String
  bidAmount        Float
  dailyBudget      Float
  totalBudget      Float?
  status           String         @default("active")
  isApproved       Boolean        @default(false)
  targetCategories Json?
  targetCountries  Json?
  todaySpent       Float          @default(0.0)
  todayImpressions Int            @default(0)
  todayClicks      Int            @default(0)
  totalImpressions Int            @default(0)
  totalClicks      Int            @default(0)
  totalSpent       Float          @default(0.0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  startDate        DateTime?
  endDate          DateTime?
  bid              Decimal?       @default(1.00) @db.Decimal(10, 2)
  AdClick          AdClick[]
  AdImpression     AdImpression[]
  Company          Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([createdAt])
  @@index([isApproved])
  @@index([productId])
  @@index([status])
}

model Category {
  id             String     @id
  name           String     @unique
  slug           String     @unique
  icon           String?
  parent_id      String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime
  Category       Category?  @relation("CategoryToCategory", fields: [parent_id], references: [id])
  other_Category Category[] @relation("CategoryToCategory")
  Product        Product[]

  @@index([parent_id])
}

model Click {
  id        Int      @id @default(autoincrement())
  productId String
  visitorId String
  ipAddress String?
  createdAt DateTime @default(now())

  @@index([productId])
  @@index([visitorId])
}

model ClickHistory {
  id          String   @id
  userId      String
  productId   String
  productName String
  category    String?
  imageUrl    String?
  price       Float?
  externalUrl String?
  clickedAt   DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clickedAt])
  @@index([productId])
  @@index([userId])
}

model Company {
  id                    String          @id
  name                  String
  email                 String          @unique
  hashedPassword        String
  contactPerson         String
  website               String?
  description           String?
  logoUrl               String?
  balance               Float           @default(0.0)
  totalSpent            Float           @default(0.0)
  autoRecharge          Boolean         @default(false)
  autoRechargeAmount    Float?
  autoRechargeThreshold Float?
  taxId                 String?
  billingAddress        String?
  billingCountry        String?
  status                String          @default("active")
  isVerified            Boolean         @default(false)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime
  lastLoginAt           DateTime?
  assignedProductId     String?
  AdClick               AdClick[]
  BillingRecord         BillingRecord[]
  Campaign              Campaign[]

  @@index([createdAt])
  @@index([email])
  @@index([status])
}

model CompanyApplications {
  id            String    @id
  companyName   String
  contactPerson String
  businessEmail String
  website       String?
  productUrls   Json?
  description   String?
  status        String    @default("pending")
  adminNotes    String?
  submittedAt   DateTime  @default(now())
  reviewedAt    DateTime?
  reviewedBy    String?

  @@index([businessEmail])
  @@index([status])
  @@index([submittedAt])
}

model Product {
  id                    String    @id
  name                  String
  description           String?
  price                 Float
  category              String?
  imageUrl              String?
  detailInfo            String?
  externalUrl           String?
  hasTrial              Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  imageApprovalStatus   String?
  pendingImageUrl       String?
  reviews               Json?
  videoUrls             Json?
  primary_category_id   String?
  secondary_category_id String?
  tags                  Json?
  advantages            Json?
  disadvantages         Json?
  pricingInfo           Json?
  deletedAt             DateTime?
  deletedBy             String?
  isActive              Boolean   @default(true)
  adminNotes            String?
  changesApprovedAt     DateTime?
  changesApprovedBy     String?
  changesStatus         String?
  changesSubmittedAt    DateTime?
  changesSubmittedBy    String?
  hasPendingChanges     Boolean   @default(false)
  pendingChanges        Json?
  Category              Category? @relation(fields: [primary_category_id], references: [id])

  @@index([changesStatus])
  @@index([hasPendingChanges])
  @@index([isActive])
  @@index([primary_category_id])
  @@index([secondary_category_id])
}

model PromotionalPackage {
  id           String   @id
  title        String
  description  String
  amount       Float
  bonus        Float
  savings      Float?
  popular      Boolean  @default(false)
  firstTime    Boolean  @default(false)
  minimumSpend Float    @default(0)
  active       Boolean  @default(true)
  order        Int      @default(1)
  targetStatus String   @default("all")
  createdAt    DateTime @default(now())
  updatedAt    DateTime

  @@index([active])
  @@index([order])
  @@index([targetStatus])
}

model Reel {
  id           String   @id
  title        String
  description  String?
  videoUrl     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  thumbnailUrl String?
  adEnabled    Boolean  @default(false)
  adLink       String?
  adText       String?
}

model SavedProduct {
  id          String   @id
  userId      String
  productId   String
  productName String
  category    String?
  imageUrl    String?
  price       Float?
  savedAt     DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([savedAt])
  @@index([userId])
}

model TopList {
  id          String   @id
  title       String
  description String
  category    String
  products    Json
  status      String   @default("draft")
  clicks      Int      @default(0)
  conversion  Float    @default(0.0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([category])
  @@index([createdAt])
  @@index([status])
}

model User {
  id             String         @id
  name           String
  email          String         @unique
  hashedPassword String?
  googleId       String?        @unique
  avatar         String?
  premium        Boolean        @default(false)
  points         Int            @default(0)
  level          String         @default("Beginner")
  streak         Int            @default(0)
  joinDate       DateTime       @default(now())
  lastLoginAt    DateTime?
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  toolsUsed      Int            @default(0)
  favoriteTools  Json?          @default("[]")
  achievements   Json?          @default("[]")
  preferences    Json?          @default("{}")
  settings       Json?          @default("{}")
  ClickHistory   ClickHistory[]
  SavedProduct   SavedProduct[]

  @@index([createdAt])
  @@index([isActive])
  @@index([premium])
}

model ad_clicks_monetization {
  id                 String   @id
  monetizable_type   String
  monetizable_id     String
  campaign_id        String?
  partner_id         String
  timestamp          DateTime @default(now())
  ip_hash            String?
  user_agent         String?
  referrer           String?
  cost_per_click     Float
  currency           String   @default("USD")
  is_valid_click     Boolean  @default(true)
  fraud_reason       String?
  country            String?
  conversion_tracked Boolean  @default(false)
  conversion_value   Float?

  @@index([campaign_id])
  @@index([monetizable_id])
  @@index([monetizable_type])
  @@index([partner_id])
  @@index([partner_id, cost_per_click], map: "idx_adclick_billing")
  @@index([campaign_id, timestamp], map: "idx_adclick_campaign")
  @@index([monetizable_type, monetizable_id], map: "idx_adclick_entity")
  @@index([partner_id, timestamp], map: "idx_adclick_partner")
}

model affiliate_clicks {
  id                    String                 @id
  monetizable_type      String
  monetizable_id        String
  ref_code              String
  partner_id            String
  timestamp             DateTime               @default(now())
  ip_hash               String?
  user_agent            String?
  referrer              String?
  click_source          String?
  country               String?
  region                String?
  is_valid              Boolean                @default(true)
  fraud_reason          String?
  conversion_id         String?                @unique
  is_converted          Boolean                @default(false)
  session_id            String?
  monetization_configs  monetization_configs   @relation(fields: [ref_code], references: [ref_code])
  affiliate_conversions affiliate_conversions?

  @@index([monetizable_id])
  @@index([monetizable_type])
  @@index([partner_id])
  @@index([ref_code])
  @@index([session_id])
  @@index([monetizable_type, monetizable_id], map: "idx_affiliate_entity")
  @@index([partner_id, timestamp], map: "idx_affiliate_partner")
  @@index([ref_code, timestamp], map: "idx_affiliate_ref")
  @@index([session_id, timestamp], map: "idx_affiliate_session")
}

model affiliate_conversions {
  id                       String               @id
  affiliate_click_id       String?              @unique
  ref_code                 String
  partner_id               String
  monetizable_type         String
  monetizable_id           String
  conversion_type          ConversionType
  conversion_value         Float?
  currency                 String               @default("USD")
  commission_rate          Float?
  commission_amount        Float?
  timestamp                DateTime             @default(now())
  attribution_window_hours Int                  @default(720)
  session_id               String?
  external_conversion_id   String?
  metadata                 String?
  is_billable              Boolean              @default(true)
  billed_at                DateTime?
  invoice_id               String?
  affiliate_clicks         affiliate_clicks?    @relation(fields: [affiliate_click_id], references: [id])
  monetization_configs     monetization_configs @relation(fields: [ref_code], references: [ref_code])

  @@index([affiliate_click_id])
  @@index([monetizable_id])
  @@index([monetizable_type])
  @@index([partner_id])
  @@index([ref_code])
  @@index([session_id])
  @@index([partner_id, is_billable, billed_at], map: "idx_conversion_billing")
  @@index([monetizable_type, monetizable_id], map: "idx_conversion_entity")
  @@index([partner_id, timestamp], map: "idx_conversion_partner")
  @@index([ref_code, timestamp], map: "idx_conversion_ref")
}

model billing_accounts {
  id                          String    @id
  partner_id                  String    @unique
  stripe_customer_id          String?   @unique
  credit_balance              Float     @default(0.0)
  total_deposited             Float     @default(0.0)
  total_spent                 Float     @default(0.0)
  auto_recharge_enabled       Boolean   @default(false)
  auto_recharge_threshold     Float     @default(50.0)
  auto_recharge_amount        Float     @default(200.0)
  daily_spend_limit           Float?
  monthly_spend_limit         Float?
  is_active                   Boolean   @default(true)
  is_verified                 Boolean   @default(false)
  credit_limit                Float     @default(1000.0)
  affiliate_billing_enabled   Boolean   @default(false)
  affiliate_billing_threshold Float     @default(10.0)
  last_affiliate_invoice_date DateTime?
  created_at                  DateTime  @default(now())
  updated_at                  DateTime
  last_activity_at            DateTime?
  notes                       String?
  metadata                    String?

  @@index([credit_balance, auto_recharge_enabled], map: "idx_billing_balance")
  @@index([partner_id, is_active], map: "idx_billing_partner")
  @@index([stripe_customer_id], map: "idx_billing_stripe")
}



model monetization_configs {
  id                     String                  @id
  monetizable_type       String
  monetizable_id         String
  mode                   MonetizationMode        @default(cpc)
  ref_code               String                  @unique
  affiliate_link         String?
  fallback_link          String?
  is_top                 Boolean                 @default(false)
  is_active              Boolean                 @default(true)
  partner_id             String
  cpc_rate               Float?
  affiliate_rate         Float?
  total_clicks           Int                     @default(0)
  total_affiliate_clicks Int                     @default(0)
  total_cpc_clicks       Int                     @default(0)
  total_conversions      Int                     @default(0)
  total_revenue          Float                   @default(0.0)
  created_at             DateTime                @default(now())
  updated_at             DateTime
  created_by             String?
  affiliate_clicks       affiliate_clicks[]
  affiliate_conversions  affiliate_conversions[]

  @@index([mode, is_active], map: "idx_mode_active")
  @@index([monetizable_type, monetizable_id], map: "idx_monetizable_entity")
  @@index([partner_id, is_active], map: "idx_partner_active")
  @@index([monetizable_id])
  @@index([monetizable_type])
  @@index([partner_id])
}

enum ConversionType {
  registration
  trial_start
  subscription
  purchase
  lead
  custom
}

enum MonetizationMode {
  cpc
  affiliate
  hybrid
}

model LandingPage {
  id              String   @id @default(uuid())
  slug            String
  title           String
  summary         String?
  language        String   @default("cs")
  contentHtml     String   @map("content_html")
  imageUrl        String?  @map("image_url")
  category        String?
  metaDescription String   @map("meta_description")
  metaKeywords    String   @map("meta_keywords")
  schemaOrg       String?  @map("schema_org")
  visuals         Json?
  faq             Json?
  format          String   @default("html")
  publishedAt     DateTime @default(now()) @map("published_at")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@unique([slug, language], name: "slug_language")
  @@index([slug])
  @@index([language])
  @@index([publishedAt])
  @@index([category])
  @@map("landing_pages")
}
