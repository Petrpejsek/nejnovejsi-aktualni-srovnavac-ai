import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Import funkc√≠ z auto-map-screenshots.js
import { findBestScreenshot } from './auto-map-screenshots.js';

async function getAllProducts() {
  const response = await fetch('http://localhost:3000/api/products?pageSize=500');
  const data = await response.json();
  return data.products;
}

async function updateScreenshotMapping() {
  console.log('üîç Naƒç√≠t√°m v≈°echny produkty z API...');
  
  try {
    const products = await getAllProducts();
    console.log(`üì¶ Nalezeno ${products.length} produkt≈Ø`);
    
    const newMappings = {};
    let foundCount = 0;
    
    console.log('\nüéØ Hled√°m screenshoty pro produkty...');
    
    for (const product of products) {
      const result = findBestScreenshot(product.name);
      if (result.screenshot && result.score > 0.7) { // vy≈°≈°√≠ threshold pro lep≈°√≠ kvalitu
        newMappings[product.name] = result.screenshot;
        foundCount++;
        console.log(`‚úÖ ${product.name} ‚Üí ${result.screenshot} (${Math.round(result.score * 100)}%)`);
      } else if (result.screenshot && result.score > 0.5) {
        console.log(`‚ö†Ô∏è  ${product.name} ‚Üí ${result.screenshot} (${Math.round(result.score * 100)}%) - N√çZK√Å SHODA`);
      }
    }
    
    console.log(`\nüìä Statistiky:`);
    console.log(`   Celkem produkt≈Ø: ${products.length}`);
    console.log(`   Nalezeno mapov√°n√≠: ${foundCount}`);
    console.log(`   Pokryt√≠: ${Math.round((foundCount / products.length) * 100)}%`);
    
    // Naƒçte souƒçasn√© mapov√°n√≠
    const screenshotUtilsPath = path.join(__dirname, '../lib/screenshot-utils.ts');
    let currentContent = fs.readFileSync(screenshotUtilsPath, 'utf8');
    
    // Vytvo≈ô√≠ nov√Ω k√≥d mapov√°n√≠
    const mappingEntries = Object.entries(newMappings)
      .map(([name, screenshot]) => `  '${name.replace(/'/g, "\\'")}': '${screenshot}'`)
      .join(',\n');
    
    const newMappingCode = `// Mapov√°n√≠ n√°zv≈Ø produkt≈Ø na n√°zvy jejich screenshot soubor≈Ø
const productToScreenshotMap: Record<string, string> = {
${mappingEntries}
};`;
    
    // Najde a nahrad√≠ star√Ω k√≥d mapov√°n√≠
    const mappingRegex = /\/\/ Mapov√°n√≠ n√°zv≈Ø produkt≈Ø na n√°zvy jejich screenshot soubor≈Ø[\s\S]*?^};/m;
    
    if (mappingRegex.test(currentContent)) {
      currentContent = currentContent.replace(mappingRegex, newMappingCode);
      console.log('\nüíæ Ukl√°d√°m aktualizovan√© mapov√°n√≠...');
      fs.writeFileSync(screenshotUtilsPath, currentContent);
      console.log('‚úÖ Screenshot mapov√°n√≠ bylo √∫spƒõ≈°nƒõ aktualizov√°no!');
    } else {
      console.log('‚ùå Nepoda≈ôilo se naj√≠t sekci mapov√°n√≠ v screenshot-utils.ts');
    }
    
  } catch (error) {
    console.error('‚ùå Chyba:', error.message);
  }
}

// Spusti pouze pokud je soubor spu≈°tƒõn p≈ô√≠mo
if (import.meta.url === `file://${process.argv[1]}`) {
  updateScreenshotMapping();
}

export { updateScreenshotMapping };
