import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// BEZPEƒåNOSTN√ç NASTAVEN√ç - zmƒõ≈àte na true pro skuteƒçnou opravu
const DRY_RUN = false  // P≈ôi true pouze zobraz√≠ zmƒõny, ale nic neuprav√≠!

// Funkce pro normalizaci tag≈Ø (stejn√° jako v scrape/route.ts)
function normalizeTag(tag: string): string {
  const normalizedTag = tag.trim().toLowerCase()
  
  // Sjednot√≠me podobn√© tagy
  const tagMap: { [key: string]: string } = {
    'text na ≈ôeƒç': 'Text to Speech',
    'text to speech': 'Text to Speech',
    '√∫prava fotek': 'Image Editing',
    '√∫prava obr√°zk≈Ø': 'Image Editing',
    'generov√°n√≠ obr√°zk≈Ø': 'Image Generation',
    'generov√°n√≠ obr√°zk√∫': 'Image Generation',
    'z√°kaznick√Ω servis': 'Customer Support',
    'z√°kaznick√° podpora': 'Customer Support',
    'projektov√© ≈ô√≠zen√≠': 'Project Management',
    'projektov√Ω management': 'Project Management',
    'avatary': 'Digital Avatars',
    'digit√°ln√≠ avatary': 'Digital Avatars',
    'video': 'Video Creation',
    'video tvorba': 'Video Creation',
    'voiceover': 'Text to Speech',
    'writing assistants': 'Writing Assistants',
    'ai writing': 'AI Writing',
    'content generation': 'Content Generation',
    'writing assistant': 'Writing Assistant'
  }

  return tagMap[normalizedTag] || tag.trim()
}

// Funkce pro odstranƒõn√≠ duplicitn√≠ch tag≈Ø
function removeDuplicateTags(tags: string[]): string[] {
  const normalizedTags = new Set<string>()
  const uniqueTags: string[] = []
  
  tags.forEach(tag => {
    const normalized = normalizeTag(tag).toLowerCase()
    if (!normalizedTags.has(normalized)) {
      normalizedTags.add(normalized)
      uniqueTags.push(normalizeTag(tag)) // P≈ôid√°me normalizovan√Ω tag
    }
  })
  
  return uniqueTags
}

async function fixDuplicateTags() {
  try {
    console.log('üîç Naƒç√≠t√°m v≈°echny produkty s tagy...')
    
    if (DRY_RUN) {
      console.log('üõ°Ô∏è  BEZPEƒåN√ù RE≈ΩIM: Pouze zobrazuji zmƒõny, nic neupravuji!')
    } else {
      console.log('‚ö†Ô∏è  AKTIVN√ç RE≈ΩIM: Bude upravovat datab√°zi!')
    }
    
    const products = await prisma.product.findMany({
      where: {
        tags: {
          not: null
        }
      },
      select: {
        id: true,
        name: true,
        tags: true
      }
    })

    console.log(`üìä Nalezeno ${products.length} produkt≈Ø s tagy`)

    let wouldFixCount = 0
    let errorCount = 0

    for (const product of products) {
      try {
        // Pokus√≠me se parsovat tagy
        let tags: string[] = []
        if (product.tags) {
          if (typeof product.tags === 'string') {
            tags = JSON.parse(product.tags)
          } else if (Array.isArray(product.tags)) {
            tags = product.tags
          }
        }

        if (!Array.isArray(tags) || tags.length === 0) {
          continue
        }

        // Odstran√≠me duplik√°ty
        const originalCount = tags.length
        const uniqueTags = removeDuplicateTags(tags)
        const newCount = uniqueTags.length

        // Pokud se poƒçet zmƒõnil, uk√°≈æeme/aktualizujeme produkt
        if (originalCount !== newCount) {
          console.log(`\nüîß ${DRY_RUN ? 'Na≈°el jsem duplik√°ty u' : 'Opravuji tagy pro'} ${product.name}:`)
          console.log(`   üìù ID produktu: ${product.id}`)
          console.log(`   üì¶ P≈ôed: ${originalCount} tag≈Ø: [${tags.join(', ')}]`)
          console.log(`   ‚ú® Po: ${newCount} tag≈Ø: [${uniqueTags.join(', ')}]`)
          console.log(`   üî¢ Odstranƒõno duplik√°t≈Ø: ${originalCount - newCount}`)

          if (!DRY_RUN) {
            // POUZE pokud nen√≠ DRY_RUN, prov√°d√≠me skuteƒçnou zmƒõnu
            await prisma.product.update({
              where: { id: product.id },
              data: {
                tags: JSON.stringify(uniqueTags)
              }
            })
            console.log(`   ‚úÖ Ulo≈æeno do datab√°ze`)
          } else {
            console.log(`   üõ°Ô∏è  Pouze simulace - nic se nezmƒõnilo`)
          }

          wouldFixCount++
        }
      } catch (error) {
        console.error(`‚ùå Chyba p≈ôi zpracov√°n√≠ produktu ${product.name}:`, error)
        errorCount++
      }
    }

    console.log('\nüéØ V√Ωsledky anal√Ωzy tag≈Ø:')
    console.log(`üìä Produkt≈Ø s duplik√°ty: ${wouldFixCount}`)
    console.log(`‚ùå Chyby: ${errorCount}`)
    console.log(`üîç Celkem zkontrolov√°no: ${products.length}`)
    
    if (DRY_RUN && wouldFixCount > 0) {
      console.log('\nüí° Pro skuteƒçnou opravu zmƒõ≈àte DRY_RUN na false v k√≥du')
    } else if (!DRY_RUN && wouldFixCount > 0) {
      console.log('\n‚úÖ V≈°echny duplik√°tn√≠ tagy byly opraveny!')
    } else {
      console.log('\nüéâ ≈Ω√°dn√© duplik√°tn√≠ tagy nebyly nalezeny!')
    }

  } catch (error) {
    console.error('‚ùå Kritick√° chyba p≈ôi anal√Ωze tag≈Ø:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Spustit skript
fixDuplicateTags()
  .then(() => {
    console.log('‚úÖ Skript dokonƒçen')
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå Skript selhal:', error)
    process.exit(1)
  }) 