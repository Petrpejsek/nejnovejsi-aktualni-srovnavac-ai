import { PrismaClient } from '@prisma/client';
import fs from 'fs';

const prisma = new PrismaClient();

// Kl√≠ƒçov√° slova pro identifikaci non-AI produkt≈Ø
const NON_AI_KEYWORDS = [
  'gaming', 'game', 'sport', 'streaming', 'entertainment', 'music', 'video player',
  'social media', 'dating', 'shopping', 'e-commerce', 'marketplace', 'food delivery',
  'travel', 'booking', 'hotel', 'restaurant', 'fitness tracker', 'weather',
  'calculator', 'calendar', 'note taking', 'file manager', 'browser', 'email client',
  'messaging', 'chat app', 'photo editor', 'camera app', 'gallery', 'media player',
  'news reader', 'rss', 'podcast', 'radio', 'tv guide', 'sports scores',
  'stock market', 'banking', 'wallet', 'payment', 'invoice', 'accounting',
  'hardware', 'device', 'gadget', 'accessory', 'cable', 'charger'
];

// Kl√≠ƒçov√° slova pro identifikaci AI produkt≈Ø
const AI_KEYWORDS = [
  'artificial intelligence', 'machine learning', 'ai-powered', 'ai-driven',
  'neural network', 'deep learning', 'natural language processing', 'nlp',
  'computer vision', 'ai assistant', 'ai chatbot', 'ai automation',
  'ai analytics', 'ai generator', 'ai writer', 'ai tool', 'predictive analytics',
  'intelligent automation', 'smart algorithm', 'ai platform', 'ml model'
];

async function filterNonAiProducts() {
  try {
    console.log('üîç Hled√°m produkty v datab√°zi...');
    
    const products = await prisma.product.findMany({
      select: {
        id: true,
        name: true,
        description: true,
        detailInfo: true,
        tags: true,
        category: true
      }
    });

    console.log(`üìä Nalezeno ${products.length} produkt≈Ø`);

    const nonAiProducts = [];
    const suspiciousProducts = [];

    for (const product of products) {
      const tagsText = Array.isArray(product.tags) ? product.tags.join(' ') : (product.tags || '');
      const text = `${product.name || ''} ${product.description || ''} ${product.detailInfo || ''} ${tagsText} ${product.category || ''}`.toLowerCase();
      
      // Kontrola non-AI kl√≠ƒçov√Ωch slov
      const hasNonAiKeywords = NON_AI_KEYWORDS.some(keyword => text.includes(keyword));
      
      // Kontrola AI kl√≠ƒçov√Ωch slov
      const hasAiKeywords = AI_KEYWORDS.some(keyword => text.includes(keyword));
      
      if (hasNonAiKeywords && !hasAiKeywords) {
        nonAiProducts.push({
          id: product.id,
          name: product.name,
          description: product.description,
          category: product.category,
          reason: 'Obsahuje non-AI kl√≠ƒçov√° slova'
        });
      } else if (!hasAiKeywords && !text.includes('ai') && !text.includes('artificial')) {
        suspiciousProducts.push({
          id: product.id,
          name: product.name,
          description: product.description,
          category: product.category,
          reason: 'Neobsahuje AI kl√≠ƒçov√° slova'
        });
      }
    }

    console.log('\n‚ùå NON-AI PRODUKTY K ODSTRANƒöN√ç:');
    console.log('=====================================');
    nonAiProducts.forEach((product, index) => {
      console.log(`${index + 1}. ${product.name}`);
      console.log(`   Kategorie: ${product.category}`);
      console.log(`   Popis: ${product.description?.substring(0, 100)}...`);
      console.log(`   D≈Øvod: ${product.reason}`);
      console.log('');
    });

    console.log('\n‚ö†Ô∏è PODEZ≈òEL√â PRODUKTY (MO≈ΩN√Å NEJSOU AI):');
    console.log('=====================================');
    suspiciousProducts.slice(0, 20).forEach((product, index) => {
      console.log(`${index + 1}. ${product.name}`);
      console.log(`   Kategorie: ${product.category}`);
      console.log(`   Popis: ${product.description?.substring(0, 100)}...`);
      console.log(`   D≈Øvod: ${product.reason}`);
      console.log('');
    });

    console.log(`\nüìä STATISTIKY:`);
    console.log(`Celkem produkt≈Ø: ${products.length}`);
    console.log(`Non-AI produkty: ${nonAiProducts.length}`);
    console.log(`Podez≈ôel√© produkty: ${suspiciousProducts.length}`);
    console.log(`Pravdƒõpodobnƒõ AI produkty: ${products.length - nonAiProducts.length - suspiciousProducts.length}`);

    // Ulo≈æ√≠me seznam non-AI produkt≈Ø do souboru
    fs.writeFileSync('non-ai-products.json', JSON.stringify({
      nonAiProducts,
      suspiciousProducts: suspiciousProducts.slice(0, 50)
    }, null, 2));

    console.log('\nüíæ Seznam ulo≈æen do souboru: non-ai-products.json');
    console.log('\n‚ö†Ô∏è DOPORUƒåEN√ç: Zkontrolujte tyto produkty a odstra≈àte ty, kter√© nejsou AI n√°stroje.');

  } catch (error) {
    console.error('‚ùå Chyba p≈ôi filtrov√°n√≠ produkt≈Ø:', error);
  } finally {
    await prisma.$disconnect();
  }
}

filterNonAiProducts(); 